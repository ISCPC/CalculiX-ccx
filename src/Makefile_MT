# Note that in order to run PARDISO with Multithreading, 
# the environment variable OMP_NUM_THREADS needs to be set to
# the desired number of cpus, before compiling and before running ccx
# e.g. by entering 
#	>export OMP_NUM_THREADS=2
# in terminal to run PARDISO with 2 cpus
# More info in ccx user manual section 2

LIB_PATH=../../..

WITH_EXODUSII = false
WITH_MKL = true
WITH_MKL_STATIC = false
WITH_AURORA = false
LIBCCXPATH = /opt/local/ve/lib/libccx.so
WITH_AURORA_AVEO = false
AVEOPATH = /opt/local
VESOLVERPATH = /opt/local
WITH_PRECICE = false

OPT = -O2
#OPT = -Ofast -march=native
CFLAGS = -Wall $(OPT) -fopenmp -DARCH="Linux" -DMATRIXSTORAGE -DUSE_MT=1 -DMKL_LP64 -D_TIMELOG
FFLAGS = -Wall $(OPT) $(OPTIONS) -I$(MKL_INCLUDE) -fopenmp

#ARPACK
#CFLAGS+= -I /home/dalab/CalculixBuild/ARPACK -DARPACK
CFLAGS+= -I $(LIB_PATH)/ARPACK -DARPACK

#SPOOLES
#CFLAGS+= -I /home/dalab/CalculixBuild/SPOOLES.2.2 -DSPOOLES
CFLAGS+= -I $(LIB_PATH)/SPOOLES.2.2 -DSPOOLES

#BLAS and LAPACK
LDFLAGS= -llapack -lblas

CC=gcc
FC=gfortran

#OPTIONS = -w -fno-second-underscore -fcray-pointer -x f77-cpp-input
#FPPSTOP= -x none

## EXODUSII
ifeq ($(WITH_EXODUSII),true)
	CFLAGS  += -DEXODUSII
	lib_exists = $(shell ls /usr/lib64/libexodus.so)
	ifeq ($(lib_exists), /usr/lib64/libexodus.so)
		LDFLAGS += -lexodus -lnetcdf
	else
		LDFLAGS += -lexoIIv2c -lnetcdf
	endif
	## CFLAGS  += `pkg-config --cflags exodusii` -DEXODUSII
	## LDFLAGS += `pkg-config --libs exodusii`
endif

# INTEL MKL
ifeq ($(WITH_MKL),true)
	CFLAGS += -DPARDISO
ifeq ($(WITH_MKL_STATIC),true)
	# For static link version
	INTEL_LIB = /opt/intel/lib/intel64_lin
	MKL_LIB = /opt/intel/mkl/lib/intel64
	MKL_INCLUDE = /opt/intel/mkl/include
	CMPLR_PATH = /opt/intel/compilers_and_libraries/linux/lib/intel64
else
	# For dynamic link version
	LDFLAGS += -L/opt/intel/lib/intel64 -L/opt/intel/mkl/lib/intel64
	LDFLAGS += -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5
endif
endif

# SX-AURORA HeteroSolver
ifeq ($(WITH_AURORA),true)
	CFLAGS += -DSX_AURORA -DCCX_VEO_DEFAULT_LIBRARY_PATH=\"$(LIBCCXPATH)\"
ifeq ($(WITH_AURORA_AVEO),true)
	CFLAGS += -DUSE_AVEO -I$(AVEOPATH)/include
	LDFLAGS += -L$(AVEOPATH)/lib -Wl,-rpath=$(AVEOPATH)/lib -lveo
else
	CFLAGS += -I/opt/nec/ve/veos/include
	LDFLAGS += -L/opt/nec/ve/veos/lib64 -Wl,-rpath=/opt/nec/ve/veos/lib64 -lveo
	LDFLAGS += -L$(VESOLVERPATH)/lib -Wl,-rpath=$(VESOLVERPATH)/lib -lvesolver_api
endif
endif

.c.o :
	$(CC) $(CFLAGS) -c $<
.f.o :
	$(FC) $(FFLAGS) -c $<

include Makefile.inc

SCCXMAIN = ccx_2.16.c

# preCICE 
ifeq ($(WITH_PRECICE),true)
ADAPTER_PATH = ../lib/calculix-adapter
	PKGCONF_CFLAGS  = $(shell pkg-config --cflags libprecice)
	PKGCONF_LIBS    = $(shell pkg-config --libs libprecice)

	CFLAGS += -DPRECICE -I$(ADAPTER_PATH)/adapter -I. $(PKGCONF_CFLAGS)
	FFLAGS += -I$(ADAPTER_PATH)/adapter -I. $(PKGCONF_CFLAGS)
	LDFLAGS += -lstdc++ -lyaml-cpp $(PKGCONF_LIBS)

	SCCXC += nonlingeo_precice.c CCXHelpers.c PreciceInterface.c
	SCCXF += getflux.f getkdeltatemp.f

# Source files in this folder and in the adapter directory
%.o : $(ADAPTER_PATH)/%.c
	$(CC) $(CFLAGS) -c $< -o $@
%.o : $(ADAPTER_PATH)/%.f
	$(FC) $(FFLAGS) -c $< -o $@
%.o : $(ADAPTER_PATH)/adapter/%.c
	$(CC) $(CFLAGS) -c $< -o $@
%.o : $(ADAPTER_PATH)/adapter/%.cpp
	#g++ -std=c++11 -I$(YAML)/include -c $< -o $@ $(LIBS)
	$(CXX) -std=c++11 -c $< -o $@ $(LIBS)
endif

OCCXF = $(SCCXF:.f=.o)
OCCXC = $(SCCXC:.c=.o)
OCCXMAIN = $(SCCXMAIN:.c=.o)

ifeq ($(WITH_PRECICE),true)
OCCXC += ConfigReader.o
endif

LIBS = \
       $(LIB_PATH)/ARPACK/libarpack_INTEL.a \
       $(LIB_PATH)/SPOOLES.2.2/MT/src/spoolesMT.a \
       $(LIB_PATH)/SPOOLES.2.2/spooles.a

all: ccx_2.16_MT

$(OCCXMAIN): $(SCCXMAIN) frd.c
	./date.pl; $(CC) $(CFLAGS) -c $(SCCXMAIN)
	
ccx_2.16_MT: $(OCCXMAIN) ccx_2.16.a $(LIBS)
ifeq ($(WITH_MKL_STATIC),true)
	$(FC) $(FFLAGS) -o $@ $(FPPSTOP) $(OCCXMAIN) ccx_2.16.a $(LDFLAGS) $(LIBS) \
	-Wl,--start-group \
	$(INTEL_LIB)/libiomp5.a \
	$(MKL_LIB)/libmkl_gf_lp64.a \
	$(MKL_LIB)/libmkl_gnu_thread.a \
	$(MKL_LIB)/libmkl_core.a \
	-Wl,--end-group \
	-L$(CMPLR_PATH) -lpthread -lm -ldl -lc
else
	$(FC) $(FFLAGS) -o $@ $(FPPSTOP) $(OCCXMAIN) ccx_2.16.a $(LDFLAGS) $(LIBS) \
	-lpthread -lm -ldl -lc
endif

ccx_2.16.a: $(OCCXF) $(OCCXC)
	ar vr $@ $?

clean:
	rm *.a *.o ccx_2.16_MT

